{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malot\\\\OneDrive\\\\Desktop\\\\Job\\\\Web Development Course\\\\Modern React with Redux\\\\section20\\\\client\\\\src\\\\components\\\\GoogleAuth.jsx\";\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { signIn, signOut } from \"../actions\";\n\nclass GoogleAuth extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.onAuthChange = isSignedIn => {\n      // this.setState({isSignedIn: this.auth.isSignedIn.get()});\n      if (isSignedIn) {\n        this.props.signIn();\n      } else {\n        this.props.signOut();\n      }\n    };\n  }\n\n  componentDidMount() {\n    //client:auth2 is within the client:auth2\n    window.gapi.load(\"client:auth2\", () => {\n      //will wait until load is over then connect key from https://console.developers.google.com/\n      window.gapi.client.init({\n        clientId: \"208891526435-tmjrt11gt7isanlrfdmujoe59cj58do5.apps.googleusercontent.com\",\n        scope: \"email\" //will run once authication is complete\n\n      }).then(() => {\n        //get user sign in and check if they actually signed in\n        this.auth = window.gapi.auth2.getAuthInstance(); // this.setState({isSignedIn: this.auth.isSignedIn.get()});\n\n        this.onAuthChange(this.auth.isSignedIn.get()); //update the text without having to reload\n\n        this.auth.isSignedIn.listen(this.onAuthChange);\n      });\n    });\n  }\n\n  renderAuthButton() {\n    if (this.props.isSignedIn === null) {\n      return null;\n    } else if (this.props.isSignedIn) {\n      return (\n        /*#__PURE__*/\n        //signOut is a method from auth\n        React.createElement(\"button\", {\n          onClick: () => this.auth.signOut(),\n          className: \"ui red google button\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41,\n            columnNumber: 9\n          }\n        }, /*#__PURE__*/React.createElement(\"i\", {\n          className: \"google icon\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 11\n          }\n        }), \"Sign Out\")\n      );\n    } else {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: () => this.auth.signIn(),\n        className: \"ui red google button\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"i\", {\n        className: \"google icon\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }\n      }), \"Sign in with Google\");\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, this.renderAuthButton());\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    isSignIn: state.auth.isSignIn\n  };\n};\n\nexport default connect(mapStateToProps, {\n  signIn,\n  signOut\n})(GoogleAuth);","map":{"version":3,"sources":["C:/Users/malot/OneDrive/Desktop/Job/Web Development Course/Modern React with Redux/section20/client/src/components/GoogleAuth.jsx"],"names":["React","connect","signIn","signOut","GoogleAuth","Component","onAuthChange","isSignedIn","props","componentDidMount","window","gapi","load","client","init","clientId","scope","then","auth","auth2","getAuthInstance","get","listen","renderAuthButton","render","mapStateToProps","state","isSignIn"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,MAAR,EAAgBC,OAAhB,QAA8B,YAA9B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAAA;AAAA;;AAAA,SAqBvCC,YArBuC,GAqBvBC,UAAD,IAAgB;AAC7B;AACA,UAAGA,UAAH,EAAc;AACZ,aAAKC,KAAL,CAAWN,MAAX;AACD,OAFD,MAEK;AACH,aAAKM,KAAL,CAAWL,OAAX;AACD;AACF,KA5BsC;AAAA;;AAEvCM,EAAAA,iBAAiB,GAAE;AACjB;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYC,IAAZ,CAAiB,cAAjB,EAAiC,MAAM;AACrC;AACAF,MAAAA,MAAM,CAACC,IAAP,CAAYE,MAAZ,CAAmBC,IAAnB,CAAwB;AACtBC,QAAAA,QAAQ,EAAE,0EADY;AAEtBC,QAAAA,KAAK,EAAE,OAFe,CAGxB;;AAHwB,OAAxB,EAIGC,IAJH,CAIQ,MAAM;AACZ;AACA,aAAKC,IAAL,GAAYR,MAAM,CAACC,IAAP,CAAYQ,KAAZ,CAAkBC,eAAlB,EAAZ,CAFY,CAGZ;;AACA,aAAKd,YAAL,CAAkB,KAAKY,IAAL,CAAUX,UAAV,CAAqBc,GAArB,EAAlB,EAJY,CAKZ;;AACA,aAAKH,IAAL,CAAUX,UAAV,CAAqBe,MAArB,CAA4B,KAAKhB,YAAjC;AACD,OAXD;AAYD,KAdD;AAeD;;AAWDiB,EAAAA,gBAAgB,GAAE;AAChB,QAAG,KAAKf,KAAL,CAAWD,UAAX,KAA0B,IAA7B,EAAkC;AAChC,aAAO,IAAP;AACD,KAFD,MAEM,IAAG,KAAKC,KAAL,CAAWD,UAAd,EAAyB;AAC7B;AAAA;AACE;AACA;AAAQ,UAAA,OAAO,EAAE,MAAM,KAAKW,IAAL,CAAUf,OAAV,EAAvB;AAA4C,UAAA,SAAS,EAAC,sBAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAG,UAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAFF;AAOD,KARK,MAQD;AACH,0BACE;AAAQ,QAAA,OAAO,EAAE,MAAM,KAAKe,IAAL,CAAUhB,MAAV,EAAvB;AAA2C,QAAA,SAAS,EAAC,sBAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,wBADF;AAMD;AACF;;AAEDsB,EAAAA,MAAM,GAAE;AACN,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAM,KAAKD,gBAAL,EAAN,CADF;AAGD;;AAvDsC;;AA0DzC,MAAME,eAAe,GAAGC,KAAK,IAAI;AAC/B,SAAO;AAACC,IAAAA,QAAQ,EAAED,KAAK,CAACR,IAAN,CAAWS;AAAtB,GAAP;AACD,CAFD;;AAIA,eAAe1B,OAAO,CAACwB,eAAD,EAAiB;AACrCvB,EAAAA,MADqC;AAErCC,EAAAA;AAFqC,CAAjB,CAAP,CAGZC,UAHY,CAAf","sourcesContent":["import React from \"react\";\r\nimport {connect} from \"react-redux\";\r\nimport {signIn, signOut} from \"../actions\";\r\n\r\nclass GoogleAuth extends React.Component {\r\n\r\n  componentDidMount(){\r\n    //client:auth2 is within the client:auth2\r\n    window.gapi.load(\"client:auth2\", () => {\r\n      //will wait until load is over then connect key from https://console.developers.google.com/\r\n      window.gapi.client.init({\r\n        clientId: \"208891526435-tmjrt11gt7isanlrfdmujoe59cj58do5.apps.googleusercontent.com\",\r\n        scope: \"email\"\r\n      //will run once authication is complete\r\n      }).then(() => {\r\n        //get user sign in and check if they actually signed in\r\n        this.auth = window.gapi.auth2.getAuthInstance();\r\n        // this.setState({isSignedIn: this.auth.isSignedIn.get()});\r\n        this.onAuthChange(this.auth.isSignedIn.get());\r\n        //update the text without having to reload\r\n        this.auth.isSignedIn.listen(this.onAuthChange);\r\n      });\r\n    });\r\n  }\r\n\r\n  onAuthChange = (isSignedIn) => {\r\n    // this.setState({isSignedIn: this.auth.isSignedIn.get()});\r\n    if(isSignedIn){\r\n      this.props.signIn();\r\n    }else{\r\n      this.props.signOut();\r\n    }\r\n  }\r\n\r\n  renderAuthButton(){\r\n    if(this.props.isSignedIn === null){\r\n      return null;\r\n    }else if(this.props.isSignedIn){\r\n      return(\r\n        //signOut is a method from auth\r\n        <button onClick={() => this.auth.signOut()} className=\"ui red google button\">\r\n          <i className=\"google icon\"/>\r\n          Sign Out\r\n        </button>\r\n      );\r\n    }else{\r\n      return(\r\n        <button onClick={() => this.auth.signIn()} className=\"ui red google button\">\r\n          <i className=\"google icon\"/>\r\n          Sign in with Google\r\n        </button>\r\n      );\r\n    }\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      <div>{this.renderAuthButton()}</div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {isSignIn: state.auth.isSignIn};\r\n}\r\n\r\nexport default connect(mapStateToProps,{\r\n  signIn,\r\n  signOut\r\n})(GoogleAuth);\r\n"]},"metadata":{},"sourceType":"module"}