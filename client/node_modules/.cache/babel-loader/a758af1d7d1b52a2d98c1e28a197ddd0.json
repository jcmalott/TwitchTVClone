{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malot\\\\OneDrive\\\\Desktop\\\\Job\\\\Web Development Course\\\\Modern React with Redux\\\\section20\\\\client\\\\src\\\\components\\\\streams\\\\StreamCreate.jsx\";\nimport React from \"react\";\nimport { Field, reduxForm } from \"redux-form\";\n\nclass StreamCreate extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.renderInput = ({\n      input,\n      label,\n      meta\n    }) => {\n      const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`;\n      return (\n        /*#__PURE__*/\n        //any params that you want to use to will have to hook them up\n        // <input onChange={formProps.input.onChange} value={fromProps.input.value}/>\n        //this hooks up all params\n        React.createElement(\"div\", {\n          className: \"field\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 7\n          }\n        }, /*#__PURE__*/React.createElement(\"label\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 24,\n            columnNumber: 9\n          }\n        }, label), /*#__PURE__*/React.createElement(\"input\", Object.assign({}, input, {\n          autoComplete: \"off\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 9\n          }\n        })), this.renderError(meta))\n      );\n    };\n  }\n\n  //only takes error away once user clicks outside of the input box\n  renderError({\n    error,\n    touched\n  }) {\n    if (touched && error) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"ui error message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 9,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"header\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 11\n        }\n      }, error));\n    }\n  } //these are children of formProps\n\n\n  //formValues will be past instead of an event\n  onSubmit(formValues) {//redux-form will now take care of this\n    // event.preventDefault();\n    //this was created just to do preventDefault but no code is actually needed\n  }\n\n  render() {\n    return (\n      /*#__PURE__*/\n      //name field is required\n      //field does not actually place a form just sets up the connection to a action and store\n      //-component is needed for that\n      React.createElement(\"form\", {\n        className: \"ui form\",\n        onSubmit: this.props.handleSubmit(this.onSubmit),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(Field, {\n        name: \"title\",\n        component: this.renderInput,\n        label: \"Enter Title\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(Field, {\n        name: \"description\",\n        component: this.renderInput,\n        label: \"Enter Description\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"button\", {\n        className: \"ui button primary\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }\n      }, \"Submit\"))\n    );\n  }\n\n}\n\nconst validate = formValues => {\n  const errors = {}; //title and description are the name fields of field\n  //these errors are sent to the component method\n\n  if (!formValues.title) {\n    errors.title = \"You must enter a title\";\n  }\n\n  if (!formValues.description) {\n    errors.description = \"You must enter a description\";\n  }\n\n  return errors;\n};\n\nexport default reduxForm({\n  form: \"streamCreate\",\n  validate: validate\n})(StreamCreate);","map":{"version":3,"sources":["C:/Users/malot/OneDrive/Desktop/Job/Web Development Course/Modern React with Redux/section20/client/src/components/streams/StreamCreate.jsx"],"names":["React","Field","reduxForm","StreamCreate","Component","renderInput","input","label","meta","className","error","touched","renderError","onSubmit","formValues","render","props","handleSubmit","validate","errors","title","description","form"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,EAAeC,SAAf,QAA+B,YAA/B;;AAEA,MAAMC,YAAN,SAA2BH,KAAK,CAACI,SAAjC,CAA2C;AAAA;AAAA;;AAAA,SAazCC,WAbyC,GAa3B,CAAC;AAACC,MAAAA,KAAD;AAAQC,MAAAA,KAAR;AAAeC,MAAAA;AAAf,KAAD,KAA0B;AACtC,YAAMC,SAAS,GAAI,SAAQD,IAAI,CAACE,KAAL,IAAcF,IAAI,CAACG,OAAnB,GAA6B,OAA7B,GAAuC,EAAG,EAArE;AACA;AAAA;AACE;AACA;AACA;AACA;AAAK,UAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAQJ,KAAR,CADF,eAEE,+CAAWD,KAAX;AAAkB,UAAA,YAAY,EAAC,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAFF,EAIG,KAAKM,WAAL,CAAiBJ,IAAjB,CAJH;AAJF;AAWD,KA1BwC;AAAA;;AACzC;AACAI,EAAAA,WAAW,CAAC;AAACF,IAAAA,KAAD;AAAQC,IAAAA;AAAR,GAAD,EAAkB;AAC3B,QAAGA,OAAO,IAAID,KAAd,EAAoB;AAClB,0BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAyBA,KAAzB,CADF,CADF;AAKD;AACF,GAVwC,CAYzC;;;AAgBA;AACAG,EAAAA,QAAQ,CAACC,UAAD,EAAY,CAClB;AACA;AAEA;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN;AAAA;AACE;AACA;AACA;AACA;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,QAAQ,EAAE,KAAKC,KAAL,CAAWC,YAAX,CAAwB,KAAKJ,QAA7B,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAE,KAAKR,WAApC;AAAiD,QAAA,KAAK,EAAC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAEE,oBAAC,KAAD;AAAO,QAAA,IAAI,EAAC,aAAZ;AAA0B,QAAA,SAAS,EAAE,KAAKA,WAA1C;AAAuD,QAAA,KAAK,EAAC,mBAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFF,eAGE;AAAQ,QAAA,SAAS,EAAC,mBAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHF;AAJF;AAUD;;AA/CwC;;AAkD3C,MAAMa,QAAQ,GAAIJ,UAAD,IAAgB;AAC/B,QAAMK,MAAM,GAAG,EAAf,CAD+B,CAG/B;AACA;;AACA,MAAG,CAACL,UAAU,CAACM,KAAf,EAAqB;AACnBD,IAAAA,MAAM,CAACC,KAAP,GAAe,wBAAf;AACD;;AACD,MAAG,CAACN,UAAU,CAACO,WAAf,EAA2B;AACzBF,IAAAA,MAAM,CAACE,WAAP,GAAqB,8BAArB;AACD;;AAED,SAAOF,MAAP;AACD,CAbD;;AAeA,eAAejB,SAAS,CAAC;AACvBoB,EAAAA,IAAI,EAAE,cADiB;AAEvBJ,EAAAA,QAAQ,EAAEA;AAFa,CAAD,CAAT,CAGZf,YAHY,CAAf","sourcesContent":["import React from \"react\";\r\nimport {Field, reduxForm} from \"redux-form\";\r\n\r\nclass StreamCreate extends React.Component {\r\n  //only takes error away once user clicks outside of the input box\r\n  renderError({error, touched}){\r\n    if(touched && error){\r\n      return(\r\n        <div className=\"ui error message\">\r\n          <div className=\"header\">{error}</div>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n\r\n  //these are children of formProps\r\n  renderInput = ({input, label, meta}) => {\r\n    const className = `field ${meta.error && meta.touched ? \"error\" : \"\"}`\r\n    return (\r\n      //any params that you want to use to will have to hook them up\r\n      // <input onChange={formProps.input.onChange} value={fromProps.input.value}/>\r\n      //this hooks up all params\r\n      <div className=\"field\">\r\n        <label>{label}</label>\r\n        <input {...input} autoComplete=\"off\"/>\r\n        {/* errors from validate*/}\r\n        {this.renderError(meta)}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  //formValues will be past instead of an event\r\n  onSubmit(formValues){\r\n    //redux-form will now take care of this\r\n    // event.preventDefault();\r\n\r\n    //this was created just to do preventDefault but no code is actually needed\r\n  }\r\n\r\n  render(){\r\n    return(\r\n      //name field is required\r\n      //field does not actually place a form just sets up the connection to a action and store\r\n      //-component is needed for that\r\n      <form className=\"ui form\" onSubmit={this.props.handleSubmit(this.onSubmit)}>\r\n        <Field name=\"title\" component={this.renderInput} label=\"Enter Title\"/>\r\n        <Field name=\"description\" component={this.renderInput} label=\"Enter Description\"/>\r\n        <button className=\"ui button primary\">Submit</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst validate = (formValues) => {\r\n  const errors = {};\r\n\r\n  //title and description are the name fields of field\r\n  //these errors are sent to the component method\r\n  if(!formValues.title){\r\n    errors.title = \"You must enter a title\";\r\n  }\r\n  if(!formValues.description){\r\n    errors.description = \"You must enter a description\";\r\n  }\r\n\r\n  return errors;\r\n}\r\n\r\nexport default reduxForm({\r\n  form: \"streamCreate\",\r\n  validate: validate\r\n})(StreamCreate);\r\n"]},"metadata":{},"sourceType":"module"}