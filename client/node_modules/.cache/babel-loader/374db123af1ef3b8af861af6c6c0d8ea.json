{"ast":null,"code":"import streams from \"../apis/streams\";\nimport history from \"../history\";\nexport const signIn = userId => {\n  return {\n    type: \"SIGN_IN\",\n    payload: userId\n  };\n};\nexport const signOut = () => {\n  return {\n    type: \"SIGN_OUT\"\n  };\n}; //so we can access the database of streams\n\nexport const createStream = formValues => async (dispatch, getState) => {\n  const {\n    userId\n  } = getState().auth;\n  const response = await streams.post(\"/streams\", { ...formValues,\n    userId\n  });\n  dispatch({\n    type: \"CREATE_STREAM\",\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const fetchStreams = () => async dispatch => {\n  console.log(\"Calling Fetch Items\");\n  const response = await streams.get(\"/streams\");\n  console.log(response.data);\n  dispatch({\n    type: \"FETCH_STREAMS\",\n    payload: response.data\n  });\n  console.log(\"Fetched Items Called\");\n};\nexport const fetchStream = id => async dispatch => {\n  const response = await streams.get(`/streams/${id}`);\n  dispatch({\n    type: \"FETCH_STREAM\",\n    payload: response.data\n  });\n};\nexport const editStream = (id, formValues) => async dispatch => {\n  //put replaces all params within object with those that are passed\n  // const response = await streams.put(`/streams/${id}`, formValues);\n  //patch will replace the values that are passed but not remove the ones in the object that were not\n  const response = await streams.patch(`/streams/${id}`, formValues);\n  dispatch({\n    type: \"EDIT_STREAM\",\n    payload: response.data\n  });\n  history.push(\"/\");\n};\nexport const deleteStream = id => async dispatch => {\n  await streams.delete(`/streams/${id}`);\n  dispatch({\n    type: \"DELETE_STREAM\",\n    payload: id\n  });\n  history.push(\"/\");\n};","map":{"version":3,"sources":["C:/Users/malot/OneDrive/Desktop/Job/Web Development Course/Modern React with Redux/section20/client/src/actions/index.jsx"],"names":["streams","history","signIn","userId","type","payload","signOut","createStream","formValues","dispatch","getState","auth","response","post","data","push","fetchStreams","console","log","get","fetchStream","id","editStream","patch","deleteStream","delete"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,iBAApB;AACA,OAAOC,OAAP,MAAoB,YAApB;AAEA,OAAO,MAAMC,MAAM,GAAIC,MAAD,IAAY;AAChC,SAAO;AACLC,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA,OAAO,EAAEF;AAFJ,GAAP;AAID,CALM;AAOP,OAAO,MAAMG,OAAO,GAAG,MAAM;AAC3B,SAAO;AACLF,IAAAA,IAAI,EAAE;AADD,GAAP;AAGD,CAJM,C,CAMP;;AACA,OAAO,MAAMG,YAAY,GAAGC,UAAU,IAAI,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACtE,QAAM;AAACP,IAAAA;AAAD,MAAWO,QAAQ,GAAGC,IAA5B;AACA,QAAMC,QAAQ,GAAG,MAAMZ,OAAO,CAACa,IAAR,CAAa,UAAb,EAAyB,EAAC,GAAGL,UAAJ;AAAgBL,IAAAA;AAAhB,GAAzB,CAAvB;AAEAM,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAE,eAAP;AAAwBC,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAA1C,GAAD,CAAR;AACAb,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,CANM;AAQP,OAAO,MAAMC,YAAY,GAAG,MAAM,MAAMP,QAAN,IAAkB;AAClDQ,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,QAAMN,QAAQ,GAAG,MAAMZ,OAAO,CAACmB,GAAR,CAAY,UAAZ,CAAvB;AAEFF,EAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACE,IAArB;AACEL,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAE,eAAP;AAAwBC,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAA1C,GAAD,CAAR;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACD,CAPM;AASP,OAAO,MAAME,WAAW,GAAIC,EAAD,IAAQ,MAAMZ,QAAN,IAAkB;AACnD,QAAMG,QAAQ,GAAG,MAAMZ,OAAO,CAACmB,GAAR,CAAa,YAAWE,EAAG,EAA3B,CAAvB;AAEAZ,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAE,cAAP;AAAuBC,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAzC,GAAD,CAAR;AACD,CAJM;AAMP,OAAO,MAAMQ,UAAU,GAAG,CAACD,EAAD,EAAKb,UAAL,KAAoB,MAAMC,QAAN,IAAkB;AAC9D;AACA;AACA;AACA,QAAMG,QAAQ,GAAG,MAAMZ,OAAO,CAACuB,KAAR,CAAe,YAAWF,EAAG,EAA7B,EAAgCb,UAAhC,CAAvB;AAEAC,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAE,aAAP;AAAsBC,IAAAA,OAAO,EAAEO,QAAQ,CAACE;AAAxC,GAAD,CAAR;AACAb,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,CARM;AAUP,OAAO,MAAMS,YAAY,GAAIH,EAAD,IAAQ,MAAMZ,QAAN,IAAkB;AACpD,QAAMT,OAAO,CAACyB,MAAR,CAAgB,YAAWJ,EAAG,EAA9B,CAAN;AAEAZ,EAAAA,QAAQ,CAAC;AAACL,IAAAA,IAAI,EAAE,eAAP;AAAwBC,IAAAA,OAAO,EAAEgB;AAAjC,GAAD,CAAR;AACApB,EAAAA,OAAO,CAACc,IAAR,CAAa,GAAb;AACD,CALM","sourcesContent":["import streams from \"../apis/streams\";\r\nimport history from \"../history\";\r\n\r\nexport const signIn = (userId) => {\r\n  return {\r\n    type: \"SIGN_IN\",\r\n    payload: userId\r\n  }\r\n}\r\n\r\nexport const signOut = () => {\r\n  return {\r\n    type: \"SIGN_OUT\"\r\n  }\r\n}\r\n\r\n//so we can access the database of streams\r\nexport const createStream = formValues => async (dispatch, getState) => {\r\n  const {userId} = getState().auth;\r\n  const response = await streams.post(\"/streams\", {...formValues, userId});\r\n\r\n  dispatch({type: \"CREATE_STREAM\", payload: response.data});\r\n  history.push(\"/\");\r\n}\r\n\r\nexport const fetchStreams = () => async dispatch => {\r\n  console.log(\"Calling Fetch Items\");\r\n  const response = await streams.get(\"/streams\");\r\n\r\nconsole.log(response.data);\r\n  dispatch({type: \"FETCH_STREAMS\", payload: response.data});\r\n  console.log(\"Fetched Items Called\");\r\n}\r\n\r\nexport const fetchStream = (id) => async dispatch => {\r\n  const response = await streams.get(`/streams/${id}`);\r\n\r\n  dispatch({type: \"FETCH_STREAM\", payload: response.data});\r\n}\r\n\r\nexport const editStream = (id, formValues) => async dispatch => {\r\n  //put replaces all params within object with those that are passed\r\n  // const response = await streams.put(`/streams/${id}`, formValues);\r\n  //patch will replace the values that are passed but not remove the ones in the object that were not\r\n  const response = await streams.patch(`/streams/${id}`, formValues);\r\n\r\n  dispatch({type: \"EDIT_STREAM\", payload: response.data});\r\n  history.push(\"/\");\r\n}\r\n\r\nexport const deleteStream = (id) => async dispatch => {\r\n  await streams.delete(`/streams/${id}`);\r\n\r\n  dispatch({type: \"DELETE_STREAM\", payload: id});\r\n  history.push(\"/\");\r\n}\r\n"]},"metadata":{},"sourceType":"module"}