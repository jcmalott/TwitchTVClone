{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\malot\\\\OneDrive\\\\Desktop\\\\Job\\\\Web Development Course\\\\Modern React with Redux\\\\section20\\\\client\\\\src\\\\components\\\\streams\\\\StreamShow.jsx\";\nimport React from \"react\"; //used to setup streaming\n\nimport flv from \"flv.js\";\nimport { connect } from \"react-redux\";\nimport { fetchStream } from \"../../actions\";\n\nclass StreamShow extends React.Component {\n  //this method is for setting up streaming\n  constructor(props) {\n    super(props);\n    this.videoRef = React.createRef();\n  }\n\n  componentDidMount() {\n    const {\n      id\n    } = this.props.match.params;\n    this.props.fetchStream(id);\n    this.buildPlayer();\n  } //this will update once the stream is fetched\n\n\n  componentDidUpdate() {\n    this.buildPlayer();\n    this.player.play();\n  } //only attach once we get the stream\n\n\n  buildPlayer() {\n    if (this.player || !this.props.stream) {\n      return;\n    }\n\n    const {\n      id\n    } = this.props.match.params; //for streaming\n    //doc: https://www.npmjs.com/package/flv.js\n\n    this.player = flv.createPlayer({\n      type: \"flv\",\n      //where NodeMediaServer  is running\n      //Stream Name, ${id}, is setup through OBS\n      url: `http://localhost:8000/live/${id}.flv`\n    });\n    this.player.attachMediaElement(this.videoRef.current);\n    this.player.load(); //dont add the line below most browsers will stop this from happening\n    // this.player.play();\n  }\n\n  render() {\n    if (!this.props.stream) {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 14\n        }\n      }, \"Loading...\");\n    }\n\n    const {\n      title,\n      description\n    } = this.props.stream;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: this.videoRef,\n      style: {\n        width: \"100%\"\n      },\n      controls: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }\n    }, title), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, description));\n  }\n\n}\n\nconst mapStateToProps = (state, ownProps) => {\n  return {\n    stream: state.streams[ownProps.match.params.id]\n  };\n};\n\nexport default connect(mapStateToProps, {\n  fetchStream\n})(StreamShow);","map":{"version":3,"sources":["C:/Users/malot/OneDrive/Desktop/Job/Web Development Course/Modern React with Redux/section20/client/src/components/streams/StreamShow.jsx"],"names":["React","flv","connect","fetchStream","StreamShow","Component","constructor","props","videoRef","createRef","componentDidMount","id","match","params","buildPlayer","componentDidUpdate","player","play","stream","createPlayer","type","url","attachMediaElement","current","load","render","title","description","width","mapStateToProps","state","ownProps","streams"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,OAAOC,GAAP,MAAgB,QAAhB;AACA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,WAAR,QAA0B,eAA1B;;AAEA,MAAMC,UAAN,SAAyBJ,KAAK,CAACK,SAA/B,CAAyC;AAEvC;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAO;AAChB,UAAMA,KAAN;AAEA,SAAKC,QAAL,GAAgBR,KAAK,CAACS,SAAN,EAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAE;AACjB,UAAM;AAACC,MAAAA;AAAD,QAAO,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAA9B;AACA,SAAKN,KAAL,CAAWJ,WAAX,CAAuBQ,EAAvB;AACA,SAAKG,WAAL;AACD,GAbsC,CAezC;;;AACEC,EAAAA,kBAAkB,GAAE;AAClB,SAAKD,WAAL;AACA,SAAKE,MAAL,CAAYC,IAAZ;AACD,GAnBsC,CAqBvC;;;AACAH,EAAAA,WAAW,GAAE;AACX,QAAG,KAAKE,MAAL,IAAe,CAAC,KAAKT,KAAL,CAAWW,MAA9B,EAAqC;AACnC;AACD;;AAED,UAAM;AAACP,MAAAA;AAAD,QAAO,KAAKJ,KAAL,CAAWK,KAAX,CAAiBC,MAA9B,CALW,CAMX;AACA;;AACA,SAAKG,MAAL,GAAcf,GAAG,CAACkB,YAAJ,CAAiB;AAC7BC,MAAAA,IAAI,EAAE,KADuB;AAE7B;AACA;AACAC,MAAAA,GAAG,EAAG,8BAA6BV,EAAG;AAJT,KAAjB,CAAd;AAMA,SAAKK,MAAL,CAAYM,kBAAZ,CAA+B,KAAKd,QAAL,CAAce,OAA7C;AACA,SAAKP,MAAL,CAAYQ,IAAZ,GAfW,CAgBX;AACA;AACD;;AAEDC,EAAAA,MAAM,GAAE;AACN,QAAG,CAAC,KAAKlB,KAAL,CAAWW,MAAf,EAAsB;AACpB,0BAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAAP;AACD;;AAED,UAAM;AAACQ,MAAAA,KAAD;AAAQC,MAAAA;AAAR,QAAuB,KAAKpB,KAAL,CAAWW,MAAxC;AACA,wBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAO,MAAA,GAAG,EAAE,KAAKV,QAAjB;AAA2B,MAAA,KAAK,EAAE;AAACoB,QAAAA,KAAK,EAAE;AAAR,OAAlC;AAAmD,MAAA,QAAQ,EAAE,IAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKF,KAAL,CAFF,eAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAKC,WAAL,CAHF,CADF;AAOD;;AAvDsC;;AA0DzC,MAAME,eAAe,GAAG,CAACC,KAAD,EAAQC,QAAR,KAAqB;AAC3C,SAAO;AAACb,IAAAA,MAAM,EAAEY,KAAK,CAACE,OAAN,CAAcD,QAAQ,CAACnB,KAAT,CAAeC,MAAf,CAAsBF,EAApC;AAAT,GAAP;AACD,CAFD;;AAIA,eAAeT,OAAO,CAAC2B,eAAD,EAAkB;AAAC1B,EAAAA;AAAD,CAAlB,CAAP,CAAwCC,UAAxC,CAAf","sourcesContent":["import React from \"react\";\r\n//used to setup streaming\r\nimport flv from \"flv.js\"\r\nimport {connect} from \"react-redux\";\r\nimport {fetchStream} from \"../../actions\";\r\n\r\nclass StreamShow extends React.Component {\r\n\r\n  //this method is for setting up streaming\r\n  constructor(props){\r\n    super(props);\r\n\r\n    this.videoRef = React.createRef();\r\n  }\r\n\r\n  componentDidMount(){\r\n    const {id} = this.props.match.params;\r\n    this.props.fetchStream(id);\r\n    this.buildPlayer();\r\n  }\r\n\r\n//this will update once the stream is fetched\r\n  componentDidUpdate(){\r\n    this.buildPlayer();\r\n    this.player.play();\r\n  }\r\n\r\n  //only attach once we get the stream\r\n  buildPlayer(){\r\n    if(this.player || !this.props.stream){\r\n      return;\r\n    }\r\n\r\n    const {id} = this.props.match.params;\r\n    //for streaming\r\n    //doc: https://www.npmjs.com/package/flv.js\r\n    this.player = flv.createPlayer({\r\n      type: \"flv\",\r\n      //where NodeMediaServer  is running\r\n      //Stream Name, ${id}, is setup through OBS\r\n      url: `http://localhost:8000/live/${id}.flv`\r\n    });\r\n    this.player.attachMediaElement(this.videoRef.current);\r\n    this.player.load();\r\n    //dont add the line below most browsers will stop this from happening\r\n    // this.player.play();\r\n  }\r\n\r\n  render(){\r\n    if(!this.props.stream){\r\n      return <div>Loading...</div>\r\n    }\r\n\r\n    const {title, description} = this.props.stream;\r\n    return(\r\n      <div>\r\n        <video ref={this.videoRef} style={{width: \"100%\"}} controls={true}/>\r\n        <h1>{title}</h1>\r\n        <h5>{description}</h5>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  return {stream: state.streams[ownProps.match.params.id]};\r\n}\r\n\r\nexport default connect(mapStateToProps, {fetchStream})(StreamShow);\r\n"]},"metadata":{},"sourceType":"module"}